{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["socket","io","resizeWindow","vh","window","innerHeight","document","body","style","setProperty","App","user","useRef","Math","random","useState","messages","setMessages","value","setValue","input","useEffect","addEventListener","on","data","prev","newMessages","push","console","log","className","map","item","i","id","current","message","onSubmit","e","preventDefault","emit","focus","ref","required","onChange","target","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"qPA8BMA,EAASC,MAEf,SAASC,IACP,IAAIC,EAA0B,IAArBC,OAAOC,YAChBC,SAASC,KAAKC,MAAMC,YAAY,OAAhC,UAA2CN,EAA3C,OAqDaO,MAlDf,WAGE,IAAMC,EAAOC,iBAAOC,KAAKC,UAHZ,EAImBC,mBAAS,IAJ5B,mBAINC,EAJM,KAIIC,EAJJ,OAKaF,mBAAS,IALtB,mBAKNG,EALM,KAKCC,EALD,KAMPC,EAAQR,iBAAO,MAerB,OAdAS,qBAAU,WACRjB,OAAOkB,iBAAiB,UAAU,kBAAMpB,OACxCA,IACAF,EAAOuB,GAAG,WAAW,SAACC,GACpBP,GAAY,SAACQ,GACX,IAAMC,EAAW,YAAOD,GAExB,OADAC,EAAYC,KAAKH,GACVE,UAGV,IACHL,qBAAU,WACRO,QAAQC,IAAIb,KACX,CAACA,IAEF,sBAAKc,UAAU,MAAf,UACE,oBAAIA,UAAU,WAAd,SACGd,EAASe,KAAI,SAACC,EAAMC,GAAP,OACZ,oBAAIH,UAAWE,EAAKE,KAAOvB,EAAKwB,QAAU,OAAS,QAAnD,SACGH,EAAKI,SADyDH,QAKrE,uBACEI,SAAU,SAACC,GACTA,EAAEC,iBACFvC,EAAOwC,KAAK,aAAc,CAAEN,GAAIvB,EAAKwB,QAASC,QAASlB,IACvDC,EAAS,IACTC,EAAMe,QAAQM,SALlB,UAQE,uBACEC,IAAKtB,EACLuB,UAAU,EACVC,SAAU,SAACN,GAAD,OAAOnB,EAASmB,EAAEO,OAAO3B,QACnCA,MAAOA,IAET,wBAAQ4B,KAAK,SAAb,yBCrEOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpD,SAASqD,eAAe,SAM1BZ,M","file":"static/js/main.4a240faf.chunk.js","sourcesContent":["import { useState, useEffect, useRef, useContext } from \"react\";\nimport { SocketContext } from \"./context/socketContext\";\nimport io from \"socket.io-client\";\nimport \"./App.css\";\n\n// function Play() {\n//   const [stream, setStream] = useState(null);\n//   const player = useRef(null);\n//   return (\n//     <div>\n//       <button\n//         onClick={async () => {\n//           await navigator.mediaDevices\n//             .getUserMedia({ audio: true, video: false })\n//             .then((_stream) => {\n//               setStream(_stream);\n//               console.log(_stream);\n//             })\n//             .catch((err) => {\n//               console.log(err);\n//             });\n//         }}\n//       >\n//         play\n//       </button>\n//       {stream && <audio ref={player} src={stream} controls />}\n//     </div>\n//   );\n// }\n\nconst socket = io();\n\nfunction resizeWindow() {\n  let vh = window.innerHeight * 0.01;\n  document.body.style.setProperty(\"--vh\", `${vh}px`);\n}\n\nfunction App() {\n  // const socket = useContext(SocketContext);\n  // console.log(socket);\n  const user = useRef(Math.random());\n  const [messages, setMessages] = useState([]);\n  const [value, setValue] = useState(\"\");\n  const input = useRef(null);\n  useEffect(() => {\n    window.addEventListener(\"resize\", () => resizeWindow());\n    resizeWindow();\n    socket.on(\"newData\", (data) => {\n      setMessages((prev) => {\n        const newMessages = [...prev];\n        newMessages.push(data);\n        return newMessages;\n      });\n    });\n  }, []);\n  useEffect(() => {\n    console.log(messages);\n  }, [messages]);\n  return (\n    <div className=\"App\">\n      <ul className=\"messages\">\n        {messages.map((item, i) => (\n          <li className={item.id === user.current ? \"self\" : \"other\"} key={i}>\n            {item.message}\n          </li>\n        ))}\n      </ul>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          socket.emit(\"newMessage\", { id: user.current, message: value });\n          setValue(\"\");\n          input.current.focus();\n        }}\n      >\n        <input\n          ref={input}\n          required={true}\n          onChange={(e) => setValue(e.target.value)}\n          value={value}\n        />\n        <button type=\"submit\">send</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { SocketContext } from \"./context/socketContext\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}